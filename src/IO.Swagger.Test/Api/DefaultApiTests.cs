/* 
 * ngDesk_Operations
 *
 * ngDesk_Operations
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing DefaultApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DefaultApiTests
    {
        private DefaultApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DefaultApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DefaultApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DefaultApi
            //Assert.IsInstanceOfType(typeof(DefaultApi), instance, "instance is a DefaultApi");
        }

        
        /// <summary>
        /// Test GetTicket
        /// </summary>
        [Test]
        public void GetTicketTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ticketId = null;
            //string authenticationToken = null;
            //string category = null;
            //string statuses = null;
            //string orderedColumn = null;
            //string orderedBy = null;
            //string clientId = null;
            //string clientSecret = null;
            //var response = instance.GetTicket(ticketId, authenticationToken, category, statuses, orderedColumn, orderedBy, clientId, clientSecret);
            //Assert.IsInstanceOf<Ticket> (response, "response is Ticket");
        }
        
        /// <summary>
        /// Test GetTickets
        /// </summary>
        [Test]
        public void GetTicketsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal? authenticationToken = null;
            //int? start = null;
            //int? length = null;
            //int? draw = null;
            //string q = null;
            //string sortBy = null;
            //string sortByOrder = null;
            //string passedAccountId = null;
            //string passedUserId = null;
            //int? viewId = null;
            //string clientId = null;
            //string clientSecret = null;
            //var response = instance.GetTickets(authenticationToken, start, length, draw, q, sortBy, sortByOrder, passedAccountId, passedUserId, viewId, clientId, clientSecret);
            //Assert.IsInstanceOf<List<Ticket>> (response, "response is List<Ticket>");
        }
        
        /// <summary>
        /// Test PostMessages
        /// </summary>
        [Test]
        public void PostMessagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Ticket body = null;
            //string ticketId = null;
            //string authenticationToken = null;
            //string clientId = null;
            //string clientSecret = null;
            //instance.PostMessages(body, ticketId, authenticationToken, clientId, clientSecret);
            
        }
        
        /// <summary>
        /// Test PostTickets
        /// </summary>
        [Test]
        public void PostTicketsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<TicketMessage> body = null;
            //decimal? authenticationToken = null;
            //string clientId = null;
            //string clientSecret = null;
            //var response = instance.PostTickets(body, authenticationToken, clientId, clientSecret);
            //Assert.IsInstanceOf<Ticket> (response, "response is Ticket");
        }
        
        /// <summary>
        /// Test PutTickets
        /// </summary>
        [Test]
        public void PutTicketsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<Ticket> body = null;
            //bool? authenticationToken = null;
            //string clientId = null;
            //string clientSecret = null;
            //var response = instance.PutTickets(body, authenticationToken, clientId, clientSecret);
            //Assert.IsInstanceOf<List<Ticket>> (response, "response is List<Ticket>");
        }
        
    }

}
